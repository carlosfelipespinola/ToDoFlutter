import 'package:sqflite/sqlite_api.dart';
import 'package:to_do_flutter/db/AppDatabase.dart';
import 'package:to_do_flutter/to-do/models/TaskTableDetails.dart';
import 'ToDoList.dart';
import 'ToDoListTableDetails.dart';

class ToDoListDao {
  static Future<int> insert(ToDoList toDoList, {bool autoGeneratedUid: true}) async {
    Database dbInstance = await AppDatabase.db.instance;
    var map = toDoList.toMap();
    if(autoGeneratedUid && map[UID_FIELD] == null) {
      map.remove(UID_FIELD);
    }
    return dbInstance.insert(TO_DO_LIST_TABLE_NAME, map);
  }

  static Future<List<ToDoList>> getAll() async {
    Database dbInstance = await AppDatabase.db.instance;
    var sql = 'SELECT todo.*, round((count(case tasks.$TASK_IS_FINISHED_NAME when 1 then 1.0 else null end)/(count(*) * 1.00)) * 100) as percentage from $TO_DO_LIST_TABLE_NAME as todo LEFT JOIN $TASK_TABLE_NAME as tasks on todo.$UID_FIELD = tasks.$TASK_TO_DO_UID_NAME group by todo.$UID_FIELD';
    var listOfMapToDoList = await dbInstance.rawQuery(sql);
    return listOfMapToDoList.map((toDoListMap) => ToDoList.fromMap(toDoListMap)).toList();
  }

  static Future<ToDoList> getById(int id) async {
    Database database = await AppDatabase.db.instance;
    var sql = 'SELECT todo.*, round((count(case tasks.$TASK_IS_FINISHED_NAME when 1 then 1.0 else null end)/(count(*) * 1.00)) * 100) as percentage from $TO_DO_LIST_TABLE_NAME as todo where todo.$UID_FIELD = $id LEFT JOIN $TASK_TABLE_NAME as tasks on todo.$UID_FIELD = tasks.$TASK_TO_DO_UID_NAME group by todo.$UID_FIELD';
    var toDoListMap = (await database.rawQuery(sql)).first;
    return ToDoList.fromMap(toDoListMap);
  }
}